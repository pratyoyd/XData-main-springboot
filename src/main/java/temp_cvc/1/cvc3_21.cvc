

%------------------------------------------------------------
%MUTATION TYPE: DATASET TO KILL COLUMN REPLACEMENT IN PROJECTION 
%------------------------------------------------------------

C_CUSTKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_C_CUSTKEY : C_CUSTKEY -> BOOLEAN;
ASSERT ISNULL_C_CUSTKEY(-99996);
ASSERT ISNULL_C_CUSTKEY(-99997);
ASSERT ISNULL_C_CUSTKEY(-99998);
ASSERT ISNULL_C_CUSTKEY(-99999);




DATATYPE 
C_NAME = _C_uNAME__C_uNAME_u1 | _C_uNAME__C_uNAME_u2 | _C_uNAME__C_uNAME_u3 | _C_uNAME__C_uNAME_u4 | _C_uNAME__C_uNAME_u5 | _C_uNAME__C_uNAME_u6 | _C_uNAME__C_uNAME_u7 | _C_uNAME__C_uNAME_u8 | _C_uNAME__C_uNAME_u9 | _C_uNAME__C_uNAME_u10 | _C_uNAME__C_uNAME_u11 | _C_uNAME__C_uNAME_u12 | _C_uNAME__C_uNAME_u13 | _C_uNAME__C_uNAME_u14 | _C_uNAME__C_uNAME_u15 | _C_uNAME__C_uNAME_u16 | _C_uNAME__C_uNAME_u17 | _C_uNAME__C_uNAME_u18 | _C_uNAME__C_uNAME_u19 | _C_uNAME__C_uNAME_u20 | NULL_C_NAME_1 | NULL_C_NAME_2 | NULL_C_NAME_3 | NULL_C_NAME_4 END
;ISNULL_C_NAME : C_NAME -> BOOLEAN;


DATATYPE 
C_ADDRESS = _C_uADDRESS__C_uADDRESS_u1 | _C_uADDRESS__C_uADDRESS_u2 | _C_uADDRESS__C_uADDRESS_u3 | _C_uADDRESS__C_uADDRESS_u4 | _C_uADDRESS__C_uADDRESS_u5 | _C_uADDRESS__C_uADDRESS_u6 | _C_uADDRESS__C_uADDRESS_u7 | _C_uADDRESS__C_uADDRESS_u8 | _C_uADDRESS__C_uADDRESS_u9 | _C_uADDRESS__C_uADDRESS_u10 | _C_uADDRESS__C_uADDRESS_u11 | _C_uADDRESS__C_uADDRESS_u12 | _C_uADDRESS__C_uADDRESS_u13 | _C_uADDRESS__C_uADDRESS_u14 | _C_uADDRESS__C_uADDRESS_u15 | _C_uADDRESS__C_uADDRESS_u16 | _C_uADDRESS__C_uADDRESS_u17 | _C_uADDRESS__C_uADDRESS_u18 | _C_uADDRESS__C_uADDRESS_u19 | _C_uADDRESS__C_uADDRESS_u20 | NULL_C_ADDRESS_1 | NULL_C_ADDRESS_2 | NULL_C_ADDRESS_3 | NULL_C_ADDRESS_4 END
;ISNULL_C_ADDRESS : C_ADDRESS -> BOOLEAN;


C_NATIONKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_C_NATIONKEY : C_NATIONKEY -> BOOLEAN;
ASSERT ISNULL_C_NATIONKEY(-99996);
ASSERT ISNULL_C_NATIONKEY(-99997);
ASSERT ISNULL_C_NATIONKEY(-99998);
ASSERT ISNULL_C_NATIONKEY(-99999);




DATATYPE 
C_PHONE = _C_uPHONE__1 | _C_uPHONE__2 | _C_uPHONE__3 | _C_uPHONE__4 | _C_uPHONE__5 | _C_uPHONE__6 | _C_uPHONE__7 | _C_uPHONE__8 | _C_uPHONE__9 | _C_uPHONE__10 | NULL_C_PHONE_1 | NULL_C_PHONE_2 | NULL_C_PHONE_3 | NULL_C_PHONE_4 END
;ISNULL_C_PHONE : C_PHONE -> BOOLEAN;


C_ACCTBAL : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_C_ACCTBAL : C_ACCTBAL -> BOOLEAN;
ASSERT ISNULL_C_ACCTBAL(-99996);
ASSERT ISNULL_C_ACCTBAL(-99997);
ASSERT ISNULL_C_ACCTBAL(-99998);
ASSERT ISNULL_C_ACCTBAL(-99999);




DATATYPE 
C_MKTSEGMENT = _C_uMKTSEGMENT__1 | _C_uMKTSEGMENT__2 | _C_uMKTSEGMENT__3 | _C_uMKTSEGMENT__4 | _C_uMKTSEGMENT__5 | _C_uMKTSEGMENT__6 | _C_uMKTSEGMENT__7 | _C_uMKTSEGMENT__8 | _C_uMKTSEGMENT__9 | _C_uMKTSEGMENT__10 | _C_uMKTSEGMENT__BUILDING | _C_uMKTSEGMENT__AUILDING | _C_uMKTSEGMENT__CUILDING | NULL_C_MKTSEGMENT_1 | NULL_C_MKTSEGMENT_2 | NULL_C_MKTSEGMENT_3 | NULL_C_MKTSEGMENT_4 END
;ISNULL_C_MKTSEGMENT : C_MKTSEGMENT -> BOOLEAN;


DATATYPE 
C_COMMENT = _C_uCOMMENT__C_uCOMMENT_u1 | _C_uCOMMENT__C_uCOMMENT_u2 | _C_uCOMMENT__C_uCOMMENT_u3 | _C_uCOMMENT__C_uCOMMENT_u4 | _C_uCOMMENT__C_uCOMMENT_u5 | _C_uCOMMENT__C_uCOMMENT_u6 | _C_uCOMMENT__C_uCOMMENT_u7 | _C_uCOMMENT__C_uCOMMENT_u8 | _C_uCOMMENT__C_uCOMMENT_u9 | _C_uCOMMENT__C_uCOMMENT_u10 | _C_uCOMMENT__C_uCOMMENT_u11 | _C_uCOMMENT__C_uCOMMENT_u12 | _C_uCOMMENT__C_uCOMMENT_u13 | _C_uCOMMENT__C_uCOMMENT_u14 | _C_uCOMMENT__C_uCOMMENT_u15 | _C_uCOMMENT__C_uCOMMENT_u16 | _C_uCOMMENT__C_uCOMMENT_u17 | _C_uCOMMENT__C_uCOMMENT_u18 | _C_uCOMMENT__C_uCOMMENT_u19 | _C_uCOMMENT__C_uCOMMENT_u20 | NULL_C_COMMENT_1 | NULL_C_COMMENT_2 | NULL_C_COMMENT_3 | NULL_C_COMMENT_4 END
;ISNULL_C_COMMENT : C_COMMENT -> BOOLEAN;


L_ORDERKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_L_ORDERKEY : L_ORDERKEY -> BOOLEAN;
ASSERT ISNULL_L_ORDERKEY(-99996);
ASSERT ISNULL_L_ORDERKEY(-99997);
ASSERT ISNULL_L_ORDERKEY(-99998);
ASSERT ISNULL_L_ORDERKEY(-99999);




L_PARTKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_L_PARTKEY : L_PARTKEY -> BOOLEAN;
ASSERT ISNULL_L_PARTKEY(-99996);
ASSERT ISNULL_L_PARTKEY(-99997);
ASSERT ISNULL_L_PARTKEY(-99998);
ASSERT ISNULL_L_PARTKEY(-99999);




L_SUPPKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_L_SUPPKEY : L_SUPPKEY -> BOOLEAN;
ASSERT ISNULL_L_SUPPKEY(-99996);
ASSERT ISNULL_L_SUPPKEY(-99997);
ASSERT ISNULL_L_SUPPKEY(-99998);
ASSERT ISNULL_L_SUPPKEY(-99999);




L_LINENUMBER : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_L_LINENUMBER : L_LINENUMBER -> BOOLEAN;
ASSERT ISNULL_L_LINENUMBER(-99996);
ASSERT ISNULL_L_LINENUMBER(-99997);
ASSERT ISNULL_L_LINENUMBER(-99998);
ASSERT ISNULL_L_LINENUMBER(-99999);




L_QUANTITY : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_L_QUANTITY : L_QUANTITY -> BOOLEAN;
ASSERT ISNULL_L_QUANTITY(-99996);
ASSERT ISNULL_L_QUANTITY(-99997);
ASSERT ISNULL_L_QUANTITY(-99998);
ASSERT ISNULL_L_QUANTITY(-99999);




L_EXTENDEDPRICE : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_L_EXTENDEDPRICE : L_EXTENDEDPRICE -> BOOLEAN;
ASSERT ISNULL_L_EXTENDEDPRICE(-99996);
ASSERT ISNULL_L_EXTENDEDPRICE(-99997);
ASSERT ISNULL_L_EXTENDEDPRICE(-99998);
ASSERT ISNULL_L_EXTENDEDPRICE(-99999);




L_DISCOUNT : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_L_DISCOUNT : L_DISCOUNT -> BOOLEAN;
ASSERT ISNULL_L_DISCOUNT(-99996);
ASSERT ISNULL_L_DISCOUNT(-99997);
ASSERT ISNULL_L_DISCOUNT(-99998);
ASSERT ISNULL_L_DISCOUNT(-99999);




L_TAX : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_L_TAX : L_TAX -> BOOLEAN;
ASSERT ISNULL_L_TAX(-99996);
ASSERT ISNULL_L_TAX(-99997);
ASSERT ISNULL_L_TAX(-99998);
ASSERT ISNULL_L_TAX(-99999);




DATATYPE 
L_RETURNFLAG = _L_uRETURNFLAG__1 | _L_uRETURNFLAG__2 | _L_uRETURNFLAG__3 | _L_uRETURNFLAG__4 | _L_uRETURNFLAG__5 | _L_uRETURNFLAG__6 | _L_uRETURNFLAG__7 | _L_uRETURNFLAG__8 | _L_uRETURNFLAG__9 | _L_uRETURNFLAG__10 | NULL_L_RETURNFLAG_1 | NULL_L_RETURNFLAG_2 | NULL_L_RETURNFLAG_3 | NULL_L_RETURNFLAG_4 END
;ISNULL_L_RETURNFLAG : L_RETURNFLAG -> BOOLEAN;


DATATYPE 
L_LINESTATUS = _L_uLINESTATUS__1 | _L_uLINESTATUS__2 | _L_uLINESTATUS__3 | _L_uLINESTATUS__4 | _L_uLINESTATUS__5 | _L_uLINESTATUS__6 | _L_uLINESTATUS__7 | _L_uLINESTATUS__8 | _L_uLINESTATUS__9 | _L_uLINESTATUS__10 | NULL_L_LINESTATUS_1 | NULL_L_LINESTATUS_2 | NULL_L_LINESTATUS_3 | NULL_L_LINESTATUS_4 END
;ISNULL_L_LINESTATUS : L_LINESTATUS -> BOOLEAN;


L_SHIPDATE : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > 7999 AND x < 10001) );


L_COMMITDATE : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > 7999 AND x < 10001) );


L_RECEIPTDATE : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > 7999 AND x < 10001) );


DATATYPE 
L_SHIPINSTRUCT = _L_uSHIPINSTRUCT__1 | _L_uSHIPINSTRUCT__2 | _L_uSHIPINSTRUCT__3 | _L_uSHIPINSTRUCT__4 | _L_uSHIPINSTRUCT__5 | _L_uSHIPINSTRUCT__6 | _L_uSHIPINSTRUCT__7 | _L_uSHIPINSTRUCT__8 | _L_uSHIPINSTRUCT__9 | _L_uSHIPINSTRUCT__10 | NULL_L_SHIPINSTRUCT_1 | NULL_L_SHIPINSTRUCT_2 | NULL_L_SHIPINSTRUCT_3 | NULL_L_SHIPINSTRUCT_4 END
;ISNULL_L_SHIPINSTRUCT : L_SHIPINSTRUCT -> BOOLEAN;


DATATYPE 
L_SHIPMODE = _L_uSHIPMODE__1 | _L_uSHIPMODE__2 | _L_uSHIPMODE__3 | _L_uSHIPMODE__4 | _L_uSHIPMODE__5 | _L_uSHIPMODE__6 | _L_uSHIPMODE__7 | _L_uSHIPMODE__8 | _L_uSHIPMODE__9 | _L_uSHIPMODE__10 | NULL_L_SHIPMODE_1 | NULL_L_SHIPMODE_2 | NULL_L_SHIPMODE_3 | NULL_L_SHIPMODE_4 END
;ISNULL_L_SHIPMODE : L_SHIPMODE -> BOOLEAN;


DATATYPE 
L_COMMENT = _L_uCOMMENT__L_uCOMMENT_u1 | _L_uCOMMENT__L_uCOMMENT_u2 | _L_uCOMMENT__L_uCOMMENT_u3 | _L_uCOMMENT__L_uCOMMENT_u4 | _L_uCOMMENT__L_uCOMMENT_u5 | _L_uCOMMENT__L_uCOMMENT_u6 | _L_uCOMMENT__L_uCOMMENT_u7 | _L_uCOMMENT__L_uCOMMENT_u8 | _L_uCOMMENT__L_uCOMMENT_u9 | _L_uCOMMENT__L_uCOMMENT_u10 | _L_uCOMMENT__L_uCOMMENT_u11 | _L_uCOMMENT__L_uCOMMENT_u12 | _L_uCOMMENT__L_uCOMMENT_u13 | _L_uCOMMENT__L_uCOMMENT_u14 | _L_uCOMMENT__L_uCOMMENT_u15 | _L_uCOMMENT__L_uCOMMENT_u16 | _L_uCOMMENT__L_uCOMMENT_u17 | _L_uCOMMENT__L_uCOMMENT_u18 | _L_uCOMMENT__L_uCOMMENT_u19 | _L_uCOMMENT__L_uCOMMENT_u20 | NULL_L_COMMENT_1 | NULL_L_COMMENT_2 | NULL_L_COMMENT_3 | NULL_L_COMMENT_4 END
;ISNULL_L_COMMENT : L_COMMENT -> BOOLEAN;


O_ORDERKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_O_ORDERKEY : O_ORDERKEY -> BOOLEAN;
ASSERT ISNULL_O_ORDERKEY(-99996);
ASSERT ISNULL_O_ORDERKEY(-99997);
ASSERT ISNULL_O_ORDERKEY(-99998);
ASSERT ISNULL_O_ORDERKEY(-99999);




O_CUSTKEY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_O_CUSTKEY : O_CUSTKEY -> BOOLEAN;
ASSERT ISNULL_O_CUSTKEY(-99996);
ASSERT ISNULL_O_CUSTKEY(-99997);
ASSERT ISNULL_O_CUSTKEY(-99998);
ASSERT ISNULL_O_CUSTKEY(-99999);




DATATYPE 
O_ORDERSTATUS = _O_uORDERSTATUS__1 | _O_uORDERSTATUS__2 | _O_uORDERSTATUS__3 | _O_uORDERSTATUS__4 | _O_uORDERSTATUS__5 | _O_uORDERSTATUS__6 | _O_uORDERSTATUS__7 | _O_uORDERSTATUS__8 | _O_uORDERSTATUS__9 | _O_uORDERSTATUS__10 | NULL_O_ORDERSTATUS_1 | NULL_O_ORDERSTATUS_2 | NULL_O_ORDERSTATUS_3 | NULL_O_ORDERSTATUS_4 END
;ISNULL_O_ORDERSTATUS : O_ORDERSTATUS -> BOOLEAN;


O_TOTALPRICE : TYPE = SUBTYPE (LAMBDA (x: REAL) : (x >= 00/10 AND x <= 10000/10) OR (x > -100000 AND x < -99995));


ISNULL_O_TOTALPRICE : O_TOTALPRICE -> BOOLEAN;
ASSERT ISNULL_O_TOTALPRICE(-99996);
ASSERT ISNULL_O_TOTALPRICE(-99997);
ASSERT ISNULL_O_TOTALPRICE(-99998);
ASSERT ISNULL_O_TOTALPRICE(-99999);




O_ORDERDATE : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > 7999 AND x < 10001) );


DATATYPE 
O_ORDERPRIORITY = _O_uORDERPRIORITY__1 | _O_uORDERPRIORITY__2 | _O_uORDERPRIORITY__3 | _O_uORDERPRIORITY__4 | _O_uORDERPRIORITY__5 | _O_uORDERPRIORITY__6 | _O_uORDERPRIORITY__7 | _O_uORDERPRIORITY__8 | _O_uORDERPRIORITY__9 | _O_uORDERPRIORITY__10 | NULL_O_ORDERPRIORITY_1 | NULL_O_ORDERPRIORITY_2 | NULL_O_ORDERPRIORITY_3 | NULL_O_ORDERPRIORITY_4 END
;ISNULL_O_ORDERPRIORITY : O_ORDERPRIORITY -> BOOLEAN;


DATATYPE 
O_CLERK = _O_uCLERK__1 | _O_uCLERK__2 | _O_uCLERK__3 | _O_uCLERK__4 | _O_uCLERK__5 | _O_uCLERK__6 | _O_uCLERK__7 | _O_uCLERK__8 | _O_uCLERK__9 | _O_uCLERK__10 | NULL_O_CLERK_1 | NULL_O_CLERK_2 | NULL_O_CLERK_3 | NULL_O_CLERK_4 END
;ISNULL_O_CLERK : O_CLERK -> BOOLEAN;


O_SHIPPRIORITY : TYPE = SUBTYPE (LAMBDA (x: INT) : (x > -4 AND x < 1004) OR (x > -100000 AND x < -99995));


ISNULL_O_SHIPPRIORITY : O_SHIPPRIORITY -> BOOLEAN;
ASSERT ISNULL_O_SHIPPRIORITY(-99996);
ASSERT ISNULL_O_SHIPPRIORITY(-99997);
ASSERT ISNULL_O_SHIPPRIORITY(-99998);
ASSERT ISNULL_O_SHIPPRIORITY(-99999);




DATATYPE 
O_COMMENT = _O_uCOMMENT__O_uCOMMENT_u1 | _O_uCOMMENT__O_uCOMMENT_u2 | _O_uCOMMENT__O_uCOMMENT_u3 | _O_uCOMMENT__O_uCOMMENT_u4 | _O_uCOMMENT__O_uCOMMENT_u5 | _O_uCOMMENT__O_uCOMMENT_u6 | _O_uCOMMENT__O_uCOMMENT_u7 | _O_uCOMMENT__O_uCOMMENT_u8 | _O_uCOMMENT__O_uCOMMENT_u9 | _O_uCOMMENT__O_uCOMMENT_u10 | _O_uCOMMENT__O_uCOMMENT_u11 | _O_uCOMMENT__O_uCOMMENT_u12 | _O_uCOMMENT__O_uCOMMENT_u13 | _O_uCOMMENT__O_uCOMMENT_u14 | _O_uCOMMENT__O_uCOMMENT_u15 | _O_uCOMMENT__O_uCOMMENT_u16 | _O_uCOMMENT__O_uCOMMENT_u17 | _O_uCOMMENT__O_uCOMMENT_u18 | _O_uCOMMENT__O_uCOMMENT_u19 | _O_uCOMMENT__O_uCOMMENT_u20 | NULL_O_COMMENT_1 | NULL_O_COMMENT_2 | NULL_O_COMMENT_3 | NULL_O_COMMENT_4 END
;ISNULL_O_COMMENT : O_COMMENT -> BOOLEAN;




%------------------------------------------------------------
% Tuple Types for Relations
 
%------------------------------------------------------------


%------------------------------------------------------------
% Tuple Types for Relations
 
%------------------------------------------------------------
CUSTOMER_TupleType: TYPE = [C_CUSTKEY, C_NAME, C_ADDRESS, C_NATIONKEY, C_PHONE, C_ACCTBAL, C_MKTSEGMENT, C_COMMENT];
O_CUSTOMER: ARRAY INT OF CUSTOMER_TupleType;
LINEITEM_TupleType: TYPE = [L_ORDERKEY, L_PARTKEY, L_SUPPKEY, L_LINENUMBER, L_QUANTITY, L_EXTENDEDPRICE, L_DISCOUNT, L_TAX, L_RETURNFLAG, L_LINESTATUS, L_SHIPDATE, L_COMMITDATE, L_RECEIPTDATE, L_SHIPINSTRUCT, L_SHIPMODE, L_COMMENT];
O_LINEITEM: ARRAY INT OF LINEITEM_TupleType;
ORDERS_TupleType: TYPE = [O_ORDERKEY, O_CUSTKEY, O_ORDERSTATUS, O_TOTALPRICE, O_ORDERDATE, O_ORDERPRIORITY, O_CLERK, O_SHIPPRIORITY, O_COMMENT];
O_ORDERS: ARRAY INT OF ORDERS_TupleType;


%------------------------------------------------------------
%FOREIGN  KEY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%END OF FOREIGN  KEY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%PRIMARY KEY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%END OF PRIMARY KEY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%UNIQUE CONSTRAINTS  FOR PRIMARY KEY TO SATISFY CONSTRAINED AGGREGATION
%------------------------------------------------------------


%------------------------------------------------------------
%END OF UNIQUE CONSTRAINTS  FOR PRIMARY KEY TO SATISFY CONSTRAINED AGGREGATION
%------------------------------------------------------------




%------------------------------------------------------------
% CONSTRAINTS OF THIS BLOCK 
%------------------------------------------------------------

 ASSERT (O_CUSTOMER[1].0 = O_ORDERS[1].1); 

 ASSERT (O_LINEITEM[1].0 = O_ORDERS[1].0); 


%------------------------------------------------------------
% CONSTRAINTS FOR THIS CONJUNCT 
%------------------------------------------------------------


%------------------------------------------------------------
% WHERE CLAUSE SUBQUERY BLOCK CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
% END OF WHERE CLAUSE SUBQUERY BLOCK CONSTRAINTS 
%------------------------------------------------------------

 ASSERT((O_ORDERS[1].4 <= 9203) AND (O_LINEITEM[1].10 >= 9204)  ); 
ASSERT  (O_CUSTOMER[1].6=_C_uMKTSEGMENT__BUILDING);



%------------------------------------------------------------
%GROUP BY CLAUSE CONSTRAINTS
%------------------------------------------------------------
 

%------------------------------------------------------------
%END OF GROUP BY CLAUSE CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%HAVING CLAUSE CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%END OF HAVING CLAUSE CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%PARAMETERIZED CLAUSE CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
%END OF PARAMETERIZED CLAUSE CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
%APPLICATION CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
%END OF APPLICATION CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
% UNIQUE  KEY CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
%END OF UNIQUE  KEY CONSTRAINTS 
%------------------------------------------------------------


%------------------------------------------------------------
% END OF CONSTRAINTS OF THIS BLOCK 
%------------------------------------------------------------



%------------------------------------------------------------
% COLUMN REPLACEMENT
%------------------------------------------------------------

ASSERT (O_LINEITEM[1].0  /=  O_ORDERS[1].1 );

ASSERT (O_LINEITEM[1].0  /=  O_ORDERS[1].7 );

ASSERT (O_LINEITEM[1].0  /=  O_CUSTOMER[1].0 );

ASSERT (O_LINEITEM[1].0  /=  O_CUSTOMER[1].3 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].1 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].2 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].3 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].10 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].11 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].12 );

ASSERT (O_ORDERS[1].7  /=  O_ORDERS[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_ORDERS[1].1 );

ASSERT (O_ORDERS[1].7  /=  O_CUSTOMER[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_CUSTOMER[1].3 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].1 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].2 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].3 );

ASSERT (O_LINEITEM[1].0  /=  O_ORDERS[1].1 );

ASSERT (O_LINEITEM[1].0  /=  O_ORDERS[1].7 );

ASSERT (O_LINEITEM[1].0  /=  O_CUSTOMER[1].0 );

ASSERT (O_LINEITEM[1].0  /=  O_CUSTOMER[1].3 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].1 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].2 );

ASSERT (O_LINEITEM[1].0  /=  O_LINEITEM[1].3 );

ASSERT (O_LINEITEM[1].5  /=  O_ORDERS[1].3 );

ASSERT (O_LINEITEM[1].5  /=  O_CUSTOMER[1].5 );

ASSERT (O_LINEITEM[1].5  /=  O_LINEITEM[1].4 );

ASSERT (O_LINEITEM[1].5  /=  O_LINEITEM[1].6 );

ASSERT (O_LINEITEM[1].5  /=  O_LINEITEM[1].7 );

ASSERT (O_LINEITEM[1].6  /=  O_ORDERS[1].3 );

ASSERT (O_LINEITEM[1].6  /=  O_CUSTOMER[1].5 );

ASSERT (O_LINEITEM[1].6  /=  O_LINEITEM[1].4 );

ASSERT (O_LINEITEM[1].6  /=  O_LINEITEM[1].5 );

ASSERT (O_LINEITEM[1].6  /=  O_LINEITEM[1].7 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].10 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].11 );

ASSERT (O_ORDERS[1].4  /=  O_LINEITEM[1].12 );

ASSERT (O_ORDERS[1].7  /=  O_ORDERS[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_ORDERS[1].1 );

ASSERT (O_ORDERS[1].7  /=  O_CUSTOMER[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_CUSTOMER[1].3 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].0 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].1 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].2 );

ASSERT (O_ORDERS[1].7  /=  O_LINEITEM[1].3 );



%------------------------------------------------------------
% END OF COLUMN REPLACEMENT
%------------------------------------------------------------



%------------------------------------------------------------
%NULL CONSTRAINTS FOR OUTER BLOCK OF QUERY
%------------------------------------------------------------




%------------------------------------------------------------
%END OF NULL CONSTRAINTS FOR OUTER BLOCK OF QUERY
%------------------------------------------------------------



%------------------------------------------------------------
%BRANCHQUERY CONSTRAINTS
%------------------------------------------------------------



%------------------------------------------------------------
% BRANCH QUERY CONSTRAINTS FOR DIFFERENT GROUP BY COLUMN FROM PRIMARY QUERY
%------------------------------------------------------------


%------------------------------------------------------------
% BRANCH QUERY CONSTRAINTS FOR DIFFERENT GROUP BY COLUMN FROM OTHER BRANCH QUERIES
%------------------------------------------------------------


%------------------------------------------------------------
% BRANCH QUERY CONSTRAINTS FOR SAME GROUP BY COLUMN OF A BRANCH QUERY
%------------------------------------------------------------


%------------------------------------------------------------
% BRANCH QUERY GROUP BY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
% PRIMARY KEY CONSTRAINTS FOR BRANCH QUERY
%------------------------------------------------------------


%------------------------------------------------------------
% FOREIGN KEY CONSTRAINTS FOR BRANCH QUERY
%------------------------------------------------------------


%------------------------------------------------------------
%NOT NULL CONSTRAINTS FOR BRANCHQUERY


%------------------------------------------------------------



%------------------------------------------------------------
%END OF BRANCHQUERY CONSTRAINTS
%------------------------------------------------------------


%------------------------------------------------------------
%NOT NULL CONSTRAINTS


%------------------------------------------------------------

ASSERT NOT ISNULL_O_ORDERKEY(O_ORDERS[1].0);
ASSERT NOT ISNULL_O_TOTALPRICE(O_ORDERS[1].3);
ASSERT NOT ISNULL_L_LINENUMBER(O_LINEITEM[1].3);
ASSERT NOT ISNULL_L_TAX(O_LINEITEM[1].7);
ASSERT NOT ISNULL_C_PHONE(O_CUSTOMER[1].4);
ASSERT NOT ISNULL_L_DISCOUNT(O_LINEITEM[1].6);
ASSERT NOT ISNULL_O_ORDERPRIORITY(O_ORDERS[1].5);
ASSERT NOT ISNULL_O_CLERK(O_ORDERS[1].6);
ASSERT NOT ISNULL_C_NAME(O_CUSTOMER[1].1);
ASSERT NOT ISNULL_L_RETURNFLAG(O_LINEITEM[1].8);
ASSERT NOT ISNULL_O_SHIPPRIORITY(O_ORDERS[1].7);
ASSERT NOT ISNULL_L_SHIPMODE(O_LINEITEM[1].14);
ASSERT NOT ISNULL_C_MKTSEGMENT(O_CUSTOMER[1].6);
ASSERT NOT ISNULL_C_COMMENT(O_CUSTOMER[1].7);
ASSERT NOT ISNULL_O_ORDERSTATUS(O_ORDERS[1].2);
ASSERT NOT ISNULL_L_COMMENT(O_LINEITEM[1].15);
ASSERT NOT ISNULL_L_PARTKEY(O_LINEITEM[1].1);
ASSERT NOT ISNULL_C_NATIONKEY(O_CUSTOMER[1].3);
ASSERT NOT ISNULL_L_SUPPKEY(O_LINEITEM[1].2);
ASSERT NOT ISNULL_L_QUANTITY(O_LINEITEM[1].4);
ASSERT NOT ISNULL_L_LINESTATUS(O_LINEITEM[1].9);
ASSERT NOT ISNULL_L_SHIPINSTRUCT(O_LINEITEM[1].13);
ASSERT NOT ISNULL_C_CUSTKEY(O_CUSTOMER[1].0);
ASSERT NOT ISNULL_O_CUSTKEY(O_ORDERS[1].1);
ASSERT NOT ISNULL_C_ACCTBAL(O_CUSTOMER[1].5);
ASSERT NOT ISNULL_L_EXTENDEDPRICE(O_LINEITEM[1].5);
ASSERT NOT ISNULL_L_ORDERKEY(O_LINEITEM[1].0);
ASSERT NOT ISNULL_C_ADDRESS(O_CUSTOMER[1].2);
ASSERT NOT ISNULL_O_COMMENT(O_ORDERS[1].8);

QUERY FALSE;
COUNTERMODEL;